#+SETUPFILE: setup.org
#+TITLE: thi.ng/trio

* Contents                                                         :toc_3_gh:
 - [[#about-the-project][About the project]]
     - [[#overview][Overview]]
     - [[#status][Status]]
     - [[#example-usage][Example usage]]
 - [[#namespaces][Namespaces]]
 - [[#tests][Tests]]
 - [[#project-definition][Project definition]]
     - [[#injected-properties][Injected properties]]
     - [[#dependencies][Dependencies]]
         - [[#runtime][Runtime]]
         - [[#development][Development]]
     - [[#leiningen-coordinates][Leiningen coordinates]]
     - [[#building-this-project][Building this project]]
         - [[#testing][Testing]]
         - [[#working-with-the-repl][Working with the REPL]]
     - [[#leiningen-project-file][Leiningen project file]]
     - [[#clojurescript-html-harness][ClojureScript HTML harness]]
     - [[#accessing-library-version-during-runtime][Accessing library version during runtime]]
         - [[#version-namespace][Version namespace]]
     - [[#release-history][Release history]]
     - [[#contributors][Contributors]]
     - [[#license][License]]

* About the project

** Overview

This project provides a simple, yet extensible and datatype agnostic
[[http://en.wikipedia.org/wiki/Triplestore][triplestore]] API and powerful [[http://en.wikipedia.org/wiki/SPARQL][SPARQL]]-like query engine for
Clojure/ClojureScript. This library is the result of extracting &
refactoring non-RDF related functionality from the upcoming
*thi.ng/sema* toolkit and so making the underlying graph tools more
accessible to a wider audience. The library is developed in a literal
programming format and contains many examples and extensive
documentation for all parts. A test suite is being worked on too.

Triple stores are usually associated with [[http://en.wikipedia.org/wiki/Semantic_web][Semantic Web]] & [[http://en.wikipedia.org/wiki/Linked_Data][Linked Data]]
applications, however encoding data as triples is natural & useful too
for a large number of other use cases and this library is aiming to
address some of these. Although currently only a couple of in-memory
stores are available, the intention is to eventually offer a pluggable
storage layer (a bit like Datomic). Some prototype implementations for
Redis, CouchDB & Cassandra have been in development since last year
(but currently stalled due to other priorities). The aim is to develop
& bundle these in isolation as separate support libs for trio.

** Status

ALPHA quality, subject to frequent changes until further notice.

** Example usage

The [[query.org][query engine namespace]] and growing [[../test/][test suite]] is currently the
best source of information and concrete usage examples. Please take a
look!

* Namespaces

- [[core.org][thi.ng.trio.core]]
- [[query.org][thi.ng.trio.query]]

**** Non-complete / in development

- [[./entities.org][thi.ng.trio.entities]] (schema based entities w/ triple serialization)
- [[./vocabs.org][thi.ng.trio.vocabs]] (optional RDF related vocab stubs)
- [[csv.org][thi.ng.trio.csv]] (CSV -> triple/graph mapping)
- [[./inference.org][thi.ng.trio.inference]] (rule based inferencing)

* Tests

- [[../test/core.org][thi.ng.trio.test.core]]
- [[../test/query.org][thi.ng.trio.test.query]]

* Project definition

** Injected properties                                             :noexport:

#+BEGIN_SRC clojure :noweb-ref version
0.2.0-SNAPSHOT
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref project-url
http://thi.ng/trio
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/trio-<<version>>.js
#+END_SRC

** Dependencies
*** Runtime
**** [[https://github.com/clojure/clojure][Clojure]]
#+BEGIN_SRC clojure :noweb-ref dep-clj
[org.clojure/clojure "1.7.0"]
#+END_SRC

**** [[https://github.com/clojure/clojurescript][ClojureScript]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs
[org.clojure/clojurescript "0.0-3308"]
#+END_SRC

**** [[https://github.com/thi-ng/dstruct][thi.ng/dstruct]]
#+NAME: dep-dstruct
#+BEGIN_SRC clojure
[thi.ng/dstruct "0.1.0"]
#+END_SRC

**** [[https://github.com/thi-ng/math][thi.ng/math]]
#+NAME: dep-math
#+BEGIN_SRC clojure
[thi.ng/math "0.1.4"]
#+END_SRC

**** [[https://github.com/thi-ng/strf][thi.ng/strf]]
#+NAME: dep-strf
#+BEGIN_SRC clojure
[thi.ng/strf "0.1.0"]
#+END_SRC

**** [[https://github.com/thi-ng/validate/][thi.ng/validate]]
#+BEGIN_SRC clojure :noweb-ref dep-validate
[thi.ng/validate "0.1.3"]
#+END_SRC

**** [[https://github.com/thi-ng/xerror][thi.ng/xerror]]
#+NAME: dep-xerror
#+BEGIN_SRC clojure
[thi.ng/xerror "0.1.0"]
#+END_SRC

**** [[https://github.com/clojure/data.csv][data.csv]]
#+BEGIN_SRC clojure :noweb-ref dep-csv
[org.clojure/data.csv "0.1.2"]
#+END_SRC

**** [[https://github.com/ptaoussanis/timbre][timbre]]
#+BEGIN_SRC clojure :noweb-ref dep-timbre
[com.taoensso/timbre "3.3.1"]
#+END_SRC

**** [[https://github.com/postspectacular/cljs-log][cljs-log]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs-log
[cljs-log "0.2.1"]
#+END_SRC

*** Development
**** [[https://github.com/hugoduncan/criterium][Criterium]]
#+BEGIN_SRC clojure :noweb-ref dep-criterium
[criterium "0.4.3"]
#+END_SRC

**** [[https://github.com/cemerick/clojurescript.test][clojurescript.test]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs-test
[com.cemerick/clojurescript.test "0.3.3"]
#+END_SRC

**** [[https://github.com/emezeske/lein-cljsbuild][Cljsbuild]]
#+BEGIN_SRC clojure :noweb-ref dep-cljsbuild
[lein-cljsbuild "1.0.6"]
#+END_SRC

** Leiningen coordinates

#+BEGIN_SRC clojure :noweb yes :noweb-ref lein-coords
  [thi.ng/trio "0.2.0-SNAPSHOT"]
#+END_SRC

** Building this project

This project is written in a literate programming format and requires
[[https://www.gnu.org/software/emacs/][Emacs]] & [[http://orgmode.org][Org-mode]] to generate usable source code. Assuming
both tools are installed, the easiest way to generate a working
project is via command line (make sure =emacs= is on your path or else
edit its path in =tangle.sh=):

#+BEGIN_SRC bash
  git clone https://github.com/thi.ng/trio.git
  cd trio
  ./tangle.sh src/*.org test/*.org
#+END_SRC

Tangling is the process of extracting & combining source blocks from
=.org= files into an actual working project/source tree. Once tangling
is complete, you can =cd= into the generated project directory
(=babel=) and then use =lein= as usual.

*** Testing

The =project.clj= file defines an alias to trigger a complete build &
tests for both CLJ & CLJS versions.

#+BEGIN_SRC bash
  cd babel
  lein cleantest
#+END_SRC

To build the Clojurescript version simply run =lein cljsbuild test=
from the same directory. A small HTML harness for the resulting JS
file is also located in that folder (=babel/index.html=), allowing for
further experimentation in the browser.

*** Working with the REPL

Editing code blocks or files in Org-mode, then re-loading & testing
changes is quite trivial. Simply launch a REPL (via =lein= or Emacs)
as usual. Everytime you've made changes to an =.org= file, re-tangle
it from Emacs (=C-c C-v t=) or =tangle.sh=, then reload the namespace
in the REPL via =(require 'thi.ng.trio... :reload)= or similar.

** Leiningen project file                                          :noexport:

#+BEGIN_SRC clojure :tangle ../babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject thi.ng/trio "<<version>>"
    :description  "Generic triple store API & SPARQL-like query engine"
    :url          "<<project-url>>"
    :license      {:name "Apache Software License 2.0"
                   :url "http://www.apache.org/licenses/LICENSE-2.0"
                   :distribution :repo}
    :scm          {:name "git"
                   :url "git@github.com:thi-ng/trio.git"}

    :min-lein-vesion "2.4.0"

    :dependencies [<<dep-clj>>
                   <<dep-cljs>>
                   <<dep-xerror>>
                   <<dep-dstruct>>
                   <<dep-math>>
                   <<dep-strf>>
                   <<dep-validate>>
                   <<dep-csv>>
                   <<dep-timbre>>
                   <<dep-cljs-log>>]

    :profiles     {:dev {:dependencies [<<dep-criterium>>]
                         :plugins [<<dep-cljsbuild>>
                                   <<dep-cljs-test>>]
                         :global-vars {*warn-on-reflection* true}
                         :jvm-opts ^:replace []
                         :aliases {"cleantest" ["do" "clean," "test," "cljsbuild" "test"]}}}

    :cljsbuild    {:builds [{:id "simple"
                             :source-paths ["src" "test"]
                             :compiler {:output-to "<<cljs-artefact-path>>"
                                        :optimizations :whitespace
                                        :pretty-print true}}]
                   :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "http://postspectacular.com"]
                                [:timezone "0"]]])
#+END_SRC

** ClojureScript HTML harness                                      :noexport:

#+BEGIN_SRC html :tangle ../babel/index.html :noweb yes :mkdirp yes :padline no
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title><<lein-coords>> test</title>
    </head>
    <body>
      <script type="text/javascript" src="<<cljs-artefact-path>>"></script>
    </body>
  </html>
#+END_SRC

** Accessing library version during runtime

The autogenerated namespace =thi.ng.trio.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use '[thi.ng.trio.version])
  
  (prn version)
  ; "<<version>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/trio/version.cljc :noweb yes :mkdirp yes :padline no :exports none
  (ns thi.ng.trio.version)

  (def version "<<version>>")
#+END_SRC

** Release history

| *Version*      | *Released* | *Description*        | *Lein coordinates*               | *Tagged Github URL* |
|----------------+------------+----------------------+----------------------------------+---------------------|
| 0.2.0-SNAPSHOT | n/a        | CLJ1.7.0 refactoring | =[thi.ng/trio "0.2.0-SNAPSHOT"]= |                     |
| 0.1.0          | 2015-02-25 | 1st public release   | =[thi.ng/trio "0.1.0"]=          | [[https://github.com/thi-ng/trio/tree/0.1.0][0.1.0]]               |

** Contributors

| *Name*          | *Role*                          | *Website*                  |
|-----------------+---------------------------------+----------------------------|
| [[k@thi.ng][Karsten Schmidt]] | initiator & principal developer | http://postspectacular.com |

I've got a fairly detailed roadmap and task list to implement over the
coming months, but am always happy to receive feedback & suggestions
and have issues filed. Once the core engine is more refined I'll be
gladly welcoming other contributions. Thanks for understanding!

** License

This project is open source and licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache Software License 2.0]].
