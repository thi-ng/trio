#+SETUPFILE: setup.org

* Contents                                                         :toc_3_gh:
 - [[#namespace-thingtriovocabs][Namespace: thi.ng.trio.vocabs]]
     - [[#common-linked-data-terms][Common linked data terms]]
         - [[#rdf][RDF]]
         - [[#rdfs][RDFS]]
         - [[#owl][OWL]]
         - [[#dublincore][Dublincore]]
     - [[#vocab-construction-helpers][Vocab construction helpers]]
     - [[#complete-namespace-definitions][Complete namespace definitions]]

* Namespace: thi.ng.trio.vocabs

** Common linked data terms

*** RDF

#+BEGIN_SRC clojure :noweb-ref rdf
  (defvocab rdf "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    :Alt
    :Bag
    :HTML
    :List
    :PlainLiteral
    :Property
    :Resource
    :Seq
    :Statement
    :XMLLiteral
    :first
    :langString
    :nil
    :object
    :predicate
    :rest
    :subject
    :type
    :value)
#+END_SRC

*** RDFS

#+BEGIN_SRC clojure :noweb-ref rdfs
  (defvocab rdfs "http://www.w3.org/2000/01/rdf-schema#"
    :Class
    :Container
    :ContainerMembershipProperty
    :Datatype
    :Literal
    :Resource
    :comment
    :domain
    :isDefinedBy
    :label
    :member
    :range
    :seeAlso
    :subClassOf
    :subPropertyOf)
#+END_SRC

*** OWL

#+BEGIN_SRC clojure :noweb-ref owl
  (defvocab owl "http://www.w3.org/2002/07/owl#"
    :AllDifferent
    :AllDisjointClasses
    :AllDisjointProperties
    :Annotation
    :AnnotationProperty
    :AsymmetricProperty
    :Axiom
    :Class
    :DataRange
    :DatatypeProperty
    :DeprecatedClass
    :DeprecatedProperty
    :FunctionalProperty
    :InverseFunctionalProperty
    :IrreflexiveProperty
    :NamedIndividual
    :NegativePropertyAssertion
    :Nothing
    :ObjectProperty
    :Ontology
    :OntologyProperty
    :ReflexiveProperty
    :Restriction
    :SymmetricProperty
    :Thing
    :TransitiveProperty
    :allValuesFrom
    :annotatedProperty
    :annotatedSource
    :annotatedTarget
    :assertionProperty
    :backwardCompatibleWith
    :bottomDataProperty
    :bottomObjectProperty
    :cardinality
    :complementOf
    :datatypeComplementOf
    :deprecated
    :differentFrom
    :disjointUnionOf
    :disjointWith
    :distinctMembers
    :equivalentClass
    :equivalentProperty
    :hasKey
    :hasSelf
    :hasValue
    :imports
    :incompatibleWith
    :intersectionOf
    :inverseOf
    :maxCardinality
    :maxQualifiedCardinality
    :members
    :minCardinality
    :minQualifiedCardinality
    :onClass
    :onDataRange
    :onDatatype
    :onProperties
    :onProperty
    :oneOf
    :priorVersion
    :propertyChainAxiom
    :propertyDisjointWith
    :qualifiedCardinality
    :sameAs
    :someValuesFrom
    :sourceIndividual
    :targetIndividual
    :targetValue
    :topDataProperty
    :topObjectProperty
    :unionOf
    :versionIRI
    :versionInfo
    :withRestrictions)
#+END_SRC

*** Dublincore

#+BEGIN_SRC clojure :noweb-ref dcterms
  (defvocab dcterms "http://purl.org/dc/terms/"
    :abstract
    :accessRights
    :contributor
    :created
    :creator
    :dateSubmitted
    :description
    :format
    :hasPart
    :hasVersion
    :isPartOf
    :license
    :modified
    :publisher
    :references
    :rights
    :title)
#+END_SRC

** Vocab construction helpers

#+BEGIN_SRC clojure :noweb-ref helpers
  (defn expand-pname
    "Takes a prefix map and pname (\"prefix:name\") and if a valid
    prefix, returns expanded URI or else nil."
    [prefixes x]
    (if (string? x)
      (let [[[_ p n]] (re-seq #"^([A-Za-z0-9\-_]+):([A-Za-z0-9\-_]*)$" x)]
        (if-let [p (prefixes p)]
          (str p n)))))

  (defn expand-pname-maybe
    "Like expand-pname, but returns original, if it can't be expanded."
    [prefixes x]
    (or (expand-pname prefixes x) x))

  (defn expand-pnames-in-triple
    "Attempts to expand all pnames in given triple using expand-pname-maybe."
    [prefixes [s p o]]
    (api/triple
     (expand-pname-maybe prefixes s)
     (expand-pname-maybe prefixes p)
     (expand-pname-maybe prefixes o)))

  (defn find-prefix
    "Takes a prefix map and URI, attempts to find pname prefix and if
    found returns pname as 2-elem vector of [prefix name], else nil."
    [prefixes ^String uri]
    (loop [[[pre puri] & more] (seq prefixes)]
      (when pre
        (if (== 0 (.indexOf uri ^String puri))
          [pre (subs uri (count puri))]
          (recur more)))))

  (defn vocabs-from-model
    [prefixes graph]
    (->> graph
         (api/subjects)
         (reduce
          (fn [vocabs uri]
            (let [[p n] (find-prefix prefixes uri)]
              (if p
                (assoc-in vocabs [(keyword p) (keyword n)] uri)
                vocabs)))
          {})))

  (defn triple-seq-with-prefixes
    [prefixes triples]
    (->> triples
         (api/triple-seq)
         (mapv #(expand-pnames-in-triple prefixes %))))

  (defn make-vocab
    [uri xs]
    (->> xs (map (fn [x] [x (str uri (name x))])) (into {})))

  #?(:clj
     (defn load-vocab-triples
       [src]
       (let [{:keys [prefixes triples]}
             (->> src
                  (io/input-stream)
                  (slurp)
                  (edn/read-string))]
         {:prefixes prefixes
          :triples (triple-seq-with-prefixes prefixes triples)})))

  #?(:clj
     (defn load-vocabs-as-model
       [src]
       (let [{:keys [prefixes triples]} (load-vocab-triples src)]
         (vocabs-from-model prefixes (api/as-model triples)))))
#+END_SRC

** Complete namespace definitions

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/trio/vocabs.clj :mkdirp yes :padline no
  (ns thi.ng.trio.vocabs
    (:require
     [thi.ng.trio.vocabs.utils :as vu]))

  (defmacro defvocab
    [id uri & xs]
    (let [voc (vu/make-vocab uri xs)]
      `(def ~id ~voc)))
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/trio/vocabs/utils.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.trio.vocabs.utils
    (:require
     [thi.ng.trio.core :as api]
     [clojure.string :as str]
     #?@(:clj [[clojure.java.io :as io]
                [clojure.edn :as edn]])))

  <<helpers>>
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref incl-macros
  #?(:cljs (:require-macros [thi.ng.trio.vocabs :refer [defvocab]])
     :clj  (:require [thi.ng.trio.vocabs :refer [defvocab]]))
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/trio/vocabs/rdf.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.trio.vocabs.rdf
    <<incl-macros>>)

  <<rdf>>
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/trio/vocabs/rdfs.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.trio.vocabs.rdfs
    <<incl-macros>>)

  <<rdfs>>
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/trio/vocabs/dcterms.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.trio.vocabs.dcterms
    <<incl-macros>>)

  <<dcterms>>
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/trio/vocabs/owl.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.trio.vocabs.owl
    <<incl-macros>>)

  <<owl>>
#+END_SRC
